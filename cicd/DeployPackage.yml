##########################################################################
#                                                                        #
#               Deploy and test database package                         #
#                                                                        #
##########################################################################

- stage: "Release"
    displayName: "Deploy database"
    dependsOn: "Build"
    jobs:

      ##########################################################################
      #       Job: Deploy package                                              #
      ##########################################################################

      - job:
        displayName: "Deploy database"
        pool: 
          vmImage: 'windows-latest'

        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact"
            inputs:
              buildType: "current"
              artifactName: $(artifactName)
              targetPath: '$(Pipeline.Workspace)\package'
          - task: AzurePowerShell@5
            displayName: "Deploy database package"
            inputs:
              azureSubscription: "ServiceConnection"
              ScriptType: "InlineScript"
              Inline: |
                # Install the module
                Install-Module dbops -Force -Scope CurrentUser

                # Get current hosted agent ip
                $ip = Invoke-RestMethod http://ipinfo.io/json | Select-Object -ExpandProperty ip

                # Temporary add ip
                $azSqlFirwallRule = Get-AzSqlServerFirewallRule -FirewallRuleName 'TemporaryRule_AzureDevOps' -ServerName $(azSQLServerName) -ResourceGroupName $(rgName) -ErrorAction SilentlyContinue
                if ($azSqlFirwallRule) {
                  Remove-AzSqlServerFirewallRule -ServerName $(azSQLServerName) -FirewallRuleName 'TemporaryRule_AzureDevOps' -ResourceGroupName $(rgName)
                }
                New-AzSqlServerFirewallRule -ResourceGroupName $(rgName) `
                    -ServerName $(azSQLServerName) `
                    -FirewallRuleName "TemporaryRule_AzureDevOps" -StartIpAddress $ip -EndIpAddress $ip

                Install-DBOPackage -Path $(Pipeline.Workspace)\package\$(artifactName).zip -Credential $(New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $(adminSqlLogin), $(ConvertTo-SecureString -String $(adminSqlpassword) -AsPlainText -Force))

                # Always remove firewall rule
                Remove-AzSqlServerFirewallRule -ServerName $(azSQLServerName) -FirewallRuleName 'TemporaryRule_AzureDevOps' -ResourceGroupName $(rgName) -Force

              azurePowerShellVersion: "LatestVersion"

##########################################################################
#                                                                        #
#               Test database package                                    #
#                                                                        #
##########################################################################

  - stage: "Test"
    displayName: "Run test(s)"
    dependsOn: "Release"

    jobs:

      ##########################################################################
      #       Job: Test  package                                               #
      ##########################################################################

      - job:
        displayName: "Run test(s)"
        pool: 
          vmImage: 'windows-latest'    

        steps:
          - task: PowerShell@2
            inputs:
              targetType: "inline"
              script: |
                # Install required module
                Install-Module -Name dbatools -Scope CurrentUser -Repository PSGallery
                
                # Initiate variables
                $instance = "$(azSqlServerName)" + ".database.windows.net"
                $database = "$(azSqlDatabaseName)"
                $userName = "$(adminSqlLogin)"
                $password = "$(adminSqlPassword)"

                # Specify the data for container
                $Data = @{
                    instance = $instance
                    database = $database
                    userName = $userName
                    password = $password
                    procedureName = 'AddInventoryRecords'
                }
                
                # Create container
                $container = New-PesterContainer -Path .\tests\ -Data $data

                # Invoke with CI
                Invoke-Pester -Container $Container -CI
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '**/testResults.xml'
              failTaskOnFailedTests: true
              testRunTitle: 'Tests'
